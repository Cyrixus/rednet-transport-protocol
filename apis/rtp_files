--[[
    rtp-files.lua
    
    File objects for handling stuffs.
    
    Matthew DiBeranrdo [04.14.2012]
]]--

-- Includes
-- if not rtp_util then os.loadAPI("/lib/rtp_util")

-- Constants
local hostsFile = "/etc/hosts" -- Host overrides
local resolveFile = "/etc/resolve" -- Resolution File
local hostnameFile = "/etc/hostname" -- Hostname for this machine
local cacheFile = "/var/cache/rtpcache" -- Cache file for RP/CompID mapping.


--[[
    Define File Class
]]
RtpFile = {format = nil}

function RtpFile:create(file, format)
    o = {}
    setmetatable(o, self)
    self.__index = self
    o.file = file
    o.format = format
    return o
end

-- Get Entries
function RtpFile:getAllEntries(target, targetType)
    -- If there isn't a file by that name, return nothing
    if fs.exists(self.file) == false then
        return nil
    end
    
    local entryList = {}
    
    -- Iterate for all entries
    local f = io.open(self.file,"r")
    for line in f:lines() do
        -- Break the line into an array of assigned types
        local i = 1
        local entry = {}
        for v in string.gmatch(line, "([^%s]*)") do
            local type = ""
            if self.format[i] ~= nil then
                type = self.format[i]
            end
            entry[type] = v
        end
        
        -- If this is a match, add the entry to the return list
        if entry[targetType] == target then
            table.insert(entryList, entry)
        end
    end
    
    return entryList
end

-- Get just the first entry
function RtpFile:getFirstEntry(target, targetType)
    -- If there isn't a file by that name, return nothing
    if fs.exists(self.file) == false then
        return nil
    end
    
    -- Iterate for all entries
    local f = io.open(self.file,"r")
    for line in f:lines() do
        -- Break the line into an array of assigned types
        local i = 1
        local entry = {}
        for _,v in ipairs(rtp_util.split(line, "%s")) do
            local type = ""
            if self.format[i] ~= nil then
                type = self.format[i]
            end
            entry[type] = v
            i = i + 1
        end
        
        -- If this is a match, return it
        --if entry[targetType] == target then
            return entry
        --end
    end
    
    return nil
end


-- Host File
HostFile = RtpFile:create(hostsFile, {"RNA"})

-- Resolve File
ResolveFile = RtpFile:create(resolveFile, {"Target", "ResolutionChain"})

-- Hostname File
HostnameFile = RtpFile:create(hostnameFile, {"Hostname"})

-- Cache File
RtpCacheFile = RtpFile:create(cacheFile, {"Target", "HopCount", "Hops", "Timestamp", "TTL"})