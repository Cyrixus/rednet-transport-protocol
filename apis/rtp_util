--[[
    util.lua
    
    Utility operations.
    
    Matthew DiBernardo [04.10.2012]
]]--

--[[
    findPeripheralSide(pType)
    A simple function to get the side of a modem, monitor, or other peripheral.
]]
function findPeripheralSide(pType)
    for _, side in pairs(redstone.getSides()) do
        if peripheral.getType(side) == pType then
            return side
        end
    end
end

-- [[ Not-shitty regex (thanks lua-users.org!) ]]--
function findPattern(text, pattern, start)
    return string.sub(text, string.find(text, pattern, start))
end

-- [[ String Split method (Why doesn't the shell already have this?!) ]]--
function split(str, separator)
    local res = {}
    local i = 1
    repeat
        while str:find(separator, i, true) == i do
            i = i + separator:len()
        end
        
        if i >= str:len() then
            break
        end
        
        startPos = i
        endPos = str:find(separator, i, true)
        if endPos then
            e = str:sub(startPos, endPos - 1)
            i = endPos
        else
            e = str:sub(startPos)
        end
        
        table.insert(res, e)
    until endPos == nil
    
    return res
end

--[[
    splitUri()
    A function for splitting a uri into its host and address components.
]]
function splitUri(uri)
    if uri == nil then
        return nil
    end

    -- Identify the protocol
    local protocol = nil
    protoEnd = string.find(uri, "//") -- find the end of the protocol, if it exists
    if protoEnd ~= nil then
        protocol = string.sub(uri, 1, protoEnd-1)
    else
        protocol = "rtp:"
    end
    
    -- RTP is the only valid protocol right now
    if protocol == "rtp:" then
        if protoEnd ~= nil then
            dest = string.sub(uri, protoEnd+2) -- Destination == URI - protocol
        else
            dest = uri
        end
        
        -- Extract the host and address from the URI
        local host = nil
        local resource = nil
        
        hostEnd = string.find(dest, "/")
        if hostEnd ~= nil then
            host = string.sub(dest, 1, hostEnd-1)
            resource = string.sub(dest, hostEnd)
        else
            host = dest
            resource = "/"
        end
        
        -- Success! Return the host and resource
        return host, resource
    end
    
    -- We couldn't parse the resource, so return nothing
    return nil, nil
end

--[[
    hostStringToArray()
    A function to split a host string (subdomain.subdomain.domain) into a root
    domain and a subdomain array.
]]
function hostStringToArray(host)
    if host == nil then
        return nil
    end
    
    local hostArr = {}
    
    -- Extract the Domain
    local domain = findPattern(host, "%.(.-)$", nil)
    
    if domain == nil then
        hostArr["domain"] = host
        return hostArr
    end
    
    hostArr.domain = domain
    hostArr.subdomains = {}
    
    for word in string.gmatch(host, "(.-)%.") do
        table.insert(hostArr.subdomains, word)
    end
    
    return hostArr
end