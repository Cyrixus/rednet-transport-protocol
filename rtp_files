--[[
    rtp-files.lua
    
    File objects for handling stuffs.
    
    Matthew DiBeranrdo [04.14.2012]
]]--

-- Constants
local hostsFile = "/etc/hosts" -- Host overrides
local resolvFile = "/etc/resolv" -- Resolution File
local hostnameFile = "/etc/hostname" -- Hostname for this machine
local cacheFile = "/var/cache/rtpcache" -- Cache file for RP/CompID mapping.


--[[
    Define File Class
]]
RtpFile = {format = nil}

function RtpFile:create(file, format)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    o.file = file
    o.format = format
    return o
end

-- Get Entries
function RtpFile:getAllEntries(eType)
    local i = 0
    local entry
    
    -- If there isn't a file by that name, return nothing
    if fs.exists(self.file) == false then
        return nil
    end
    
    -- Iterate for all entries
    local f = io.open(self.file,"r")
    for line in f:lines() do
        -- Check to see that this is the right entry type
        local entryTypeEnd = string.find(line, " ")
        local entryType = string.sub(line, 1, entryTypeEnd-1)
        line = string.sub(line, entryTypeEnd+1)
        if entryType == eType then
            if self.format == nil then
                entry[i] = {["Type"] = entryType, ["Value"] = line}
            else
                -- Split the entry into it's component parts
                entry[i] = {}
                entry[i]["Type"] = entryType
                for f in format do
                    vEnd = string.find(line, " ")
                    if vEnd ~= nil then
                        v = string.sub(line, vEnd-1)
                        line = string.sub(line, vEnd+1)
                    else
                        v = nil
                    end
                    
                    entry[i][f] = v
                end
            end
            i = i + 1
        end
    end
    
    return entry
end

-- Get just the first entry
function RtpFile:getFirstEntry(eType)
    -- If there isn't a file by that name, return nothing
    if fs.exists(self.file) == false then
        return nil
    end
    
    -- Iterate for all entries
    local f = io.open(self.file,"r")
    for line in f:lines() do
        -- Check to see that this is the right entry type
        local entryTypeEnd = string.find(line, " ")
        local entryType = string.sub(line, 1, entryTypeEnd-1)
        line = string.sub(line, entryTypeEnd+1)
        if entryType == eType then
            if self.format == nil then
                return {["Type"] = entryType, ["Value"] = line}
            else
                -- Split the entry into it's component parts
                local entry = {}
                entry["Type"] = entryType
                for f in format do
                    vEnd = string.find(line, " ")
                    if vEnd ~= nil then
                        v = string.sub(line, vEnd-1)
                        line = string.sub(line, vEnd+1)
                    else
                        v = nil
                    end
                    
                    entry[f] = v
                end
                
                return entry
            end
        end
    end
end


-- Host File

HostFile = RtpFile:create(hostsFile, {"RNA"})

-- Resolv File
ResolveFile = RtpFile:create(resolvFile, nil)

-- Hostname File
HostnameFile = RtpFile:create(hostnameFile, nil)

-- Cache File
RtpCacheFile = RtpFile:create(cacheFile, {"Target", "HopCount", "Hops", "Timestamp", "TTL"})